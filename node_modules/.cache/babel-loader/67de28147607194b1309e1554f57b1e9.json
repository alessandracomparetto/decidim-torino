{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/* eslint-disable require-jsdoc */\n\n\nimport createSortList from \"src/decidim/admin/sort_list.component\";\nexport default function createSortableList(lists) {\n  createSortList(lists, {\n    handle: \"li\",\n    forcePlaceholderSize: true,\n    connectWith: \".js-connect\"\n  });\n} // Once in DOM\n\n$(function () {\n  var $draggables = $(\".draggable-list\");\n  var draggablesClassNames = [];\n  $draggables.each(function (index, elem) {\n    draggablesClassNames = [].concat(_toConsumableArray(draggablesClassNames), [\".\".concat(elem.className.split(\" \").filter(function (name) {\n      return /js-list.*/.test(name);\n    })[0])]);\n  });\n  document.addEventListener(\"drag\", function (event) {\n    $draggables.not(event.target.parentElement).addClass(\"dragging\");\n  });\n  document.addEventListener(\"dragend\", function () {\n    $draggables.removeClass(\"dragging\");\n  });\n  createSortableList(draggablesClassNames.join(\", \"));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,OAAOA,cAAP,MAA2B,uCAA3B;AAEA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAChDF,gBAAc,CAACE,KAAD,EAAQ;AACpBC,UAAM,EAAE,IADY;AAEpBC,wBAAoB,EAAE,IAFF;AAGpBC,eAAW,EAAE;AAHO,GAAR,CAAdL;EAOF;;AACAM,CAAC,CAAC,YAAM;AACN,MAAMC,WAAW,GAAGD,CAAC,CAAC,iBAAD,CAArB;AACA,MAAIE,oBAAoB,GAAG,EAA3B;AAEAD,aAAW,CAACE,IAAZF,CAAiB,UAACG,KAAD,EAAQC,IAAR,EAAiB;AAChCH,wBAAoB,gCAAOA,oBAAP,eAAiCG,IAAI,CAACC,SAALD,CAAeE,KAAfF,CAAqB,GAArBA,EAA0BG,MAA1BH,CAAiC,UAACI,IAAD;AAAA,aAAW,YAAaC,IAAb,CAAkBD,IAAlB,CAAX;AAAjC,OAAqE,CAArEJ,CAAjC,GAApBH;AADF;AAIAS,UAAQ,CAACC,gBAATD,CAA0B,MAA1BA,EAAkC,UAAUE,KAAV,EAAiB;AACjDZ,eAAW,CAACa,GAAZb,CAAgBY,KAAK,CAACE,MAANF,CAAaG,aAA7Bf,EAA4CgB,QAA5ChB,CAAqD,UAArDA;AADF;AAIAU,UAAQ,CAACC,gBAATD,CAA0B,SAA1BA,EAAqC,YAAW;AAC9CV,eAAW,CAACiB,WAAZjB,CAAwB,UAAxBA;AADF;AAIAN,oBAAkB,CAACO,oBAAoB,CAACiB,IAArBjB,CAA0B,IAA1BA,CAAD,CAAlBP;AAhBD,EAADK","names":["createSortList","createSortableList","lists","handle","forcePlaceholderSize","connectWith","$","$draggables","draggablesClassNames","each","index","elem","className","split","filter","name","test","document","addEventListener","event","not","target","parentElement","addClass","removeClass","join"],"sources":["/var/lib/gems/2.7.0/gems/decidim-admin-0.26.0/app/packs/src/decidim/admin/draggable-list.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\nimport createSortList from \"src/decidim/admin/sort_list.component\"\n\nexport default function createSortableList(lists) {\n  createSortList(lists, {\n    handle: \"li\",\n    forcePlaceholderSize: true,\n    connectWith: \".js-connect\"\n  })\n}\n\n// Once in DOM\n$(() => {\n  const $draggables = $(\".draggable-list\")\n  let draggablesClassNames = []\n\n  $draggables.each((index, elem) => {\n    draggablesClassNames = [...draggablesClassNames, `.${elem.className.split(\" \").filter((name) => (/js-list.*/).test(name))[0]}`]\n  })\n\n  document.addEventListener(\"drag\", function (event) {\n    $draggables.not(event.target.parentElement).addClass(\"dragging\")\n  })\n\n  document.addEventListener(\"dragend\", function() {\n    $draggables.removeClass(\"dragging\")\n  })\n\n  createSortableList(draggablesClassNames.join(\", \"))\n})\n"]},"metadata":{},"sourceType":"module"}