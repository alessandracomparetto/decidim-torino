{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/* eslint-disable require-jsdoc */\n\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\";\nimport \"src/decidim/vendor/image-resize.min\";\nimport \"src/decidim/vendor/image-upload.min\";\nvar quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\", \"width\", \"style\", \"code\", \"blockquote\", \"indent\"];\nexport default function createQuillEditor(container) {\n  var toolbar = $(container).data(\"toolbar\");\n  var disabled = $(container).data(\"disabled\");\n  var quillToolbar = [[\"bold\", \"italic\", \"underline\", \"linebreak\"], [{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }], [\"link\", \"clean\"], [\"code\", \"blockquote\"], [{\n    \"indent\": \"-1\"\n  }, {\n    \"indent\": \"+1\"\n  }]];\n  var addImage = $(container).data(\"editorImages\");\n\n  if (toolbar === \"full\") {\n    quillToolbar = [[{\n      header: [2, 3, 4, 5, 6, false]\n    }]].concat(_toConsumableArray(quillToolbar), [[\"video\"]]);\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [].concat(_toConsumableArray(quillToolbar), [[\"video\"]]);\n  }\n\n  if (addImage) {\n    quillToolbar.push([\"image\"]);\n  }\n\n  var modules = {\n    linebreak: {},\n    toolbar: {\n      container: quillToolbar,\n      handlers: {\n        \"linebreak\": lineBreakButtonHandler\n      }\n    }\n  };\n  var $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n  var token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n\n  if (addImage) {\n    modules.imageResize = {\n      modules: [\"Resize\", \"DisplaySize\"]\n    };\n    modules.imageUpload = {\n      url: $(container).data(\"uploadImagesPath\"),\n      method: \"POST\",\n      name: \"image\",\n      withCredentials: false,\n      headers: {\n        \"X-CSRF-Token\": token\n      },\n      callbackOK: function callbackOK(serverResponse, next) {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        next(serverResponse.url);\n      },\n      callbackKO: function callbackKO(serverError) {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        console.log(\"Image upload error: \".concat(serverError.message));\n      },\n      checkBeforeSend: function checkBeforeSend(file, next) {\n        $(\"div.ql-toolbar\").last().addClass(\"editor-loading\");\n        next(file);\n      }\n    };\n  }\n\n  var quill = new Quill(container, {\n    modules: modules,\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n\n  if (disabled) {\n    quill.disable();\n  }\n\n  quill.on(\"text-change\", function () {\n    var text = quill.getText(); // Triggers CustomEvent with the cursor position\n    // It is required in input_mentions.js\n\n    var event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n\n    if (text === \"\\n\" || text === \"\\n\\n\") {\n      $input.val(\"\");\n    } else {\n      $input.val(quill.root.innerHTML);\n    }\n  }); // After editor is ready, linebreak_module deletes two extraneous new lines\n\n  quill.emitter.emit(\"editor-ready\");\n\n  if (addImage) {\n    var text = $(container).data(\"dragAndDropHelpText\");\n    $(container).after(\"<p class=\\\"help-text\\\" style=\\\"margin-top:-1.5rem;\\\">\".concat(text, \"</p>\"));\n  } // After editor is ready, linebreak_module deletes two extraneous new lines\n\n\n  quill.emitter.emit(\"editor-ready\");\n  return quill;\n}","map":{"version":3,"mappings":"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","names":["lineBreakButtonHandler","quillFormats","createQuillEditor","container","toolbar","$","data","disabled","quillToolbar","list","addImage","header","push","modules","linebreak","handlers","$input","siblings","innerHTML","val","token","attr","imageResize","imageUpload","url","method","name","withCredentials","headers","callbackOK","serverResponse","next","last","removeClass","callbackKO","serverError","console","log","message","checkBeforeSend","file","addClass","quill","Quill","formats","theme","disable","on","text","getText","event","CustomEvent","detail","getSelection","dispatchEvent","root","emitter","emit","after"],"sources":["/var/lib/gems/2.7.0/gems/decidim-core-0.26.0/app/packs/src/decidim/editor.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\"\nimport \"src/decidim/vendor/image-resize.min\"\nimport \"src/decidim/vendor/image-upload.min\"\n\nconst quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\", \"width\", \"style\", \"code\", \"blockquote\", \"indent\"];\n\nexport default function createQuillEditor(container) {\n  const toolbar = $(container).data(\"toolbar\");\n  const disabled = $(container).data(\"disabled\");\n\n  let quillToolbar = [\n    [\"bold\", \"italic\", \"underline\", \"linebreak\"],\n    [{ list: \"ordered\" }, { list: \"bullet\" }],\n    [\"link\", \"clean\"],\n    [\"code\", \"blockquote\"],\n    [{ \"indent\": \"-1\"}, { \"indent\": \"+1\" }]\n  ];\n\n  let addImage = $(container).data(\"editorImages\");\n\n  if (toolbar === \"full\") {\n    quillToolbar = [\n      [{ header: [2, 3, 4, 5, 6, false] }],\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  }\n\n  if (addImage) {\n    quillToolbar.push([\"image\"]);\n  }\n\n  let modules = {\n    linebreak: {},\n    toolbar: {\n      container: quillToolbar,\n      handlers: {\n        \"linebreak\": lineBreakButtonHandler\n      }\n    }\n  };\n  const $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n  const token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n  if (addImage) {\n    modules.imageResize = {\n      modules: [\"Resize\", \"DisplaySize\"]\n    }\n    modules.imageUpload = {\n      url: $(container).data(\"uploadImagesPath\"),\n      method: \"POST\",\n      name: \"image\",\n      withCredentials: false,\n      headers: { \"X-CSRF-Token\": token },\n      callbackOK: (serverResponse, next) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\")\n        next(serverResponse.url);\n      },\n      callbackKO: (serverError) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\")\n        console.log(`Image upload error: ${serverError.message}`);\n      },\n      checkBeforeSend: (file, next) => {\n        $(\"div.ql-toolbar\").last().addClass(\"editor-loading\")\n        next(file);\n      }\n    }\n  }\n  const quill = new Quill(container, {\n    modules: modules,\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n\n  if (disabled) {\n    quill.disable();\n  }\n\n  quill.on(\"text-change\", () => {\n    const text = quill.getText();\n\n    // Triggers CustomEvent with the cursor position\n    // It is required in input_mentions.js\n    let event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n\n    if (text === \"\\n\" || text === \"\\n\\n\") {\n      $input.val(\"\");\n    } else {\n      $input.val(quill.root.innerHTML);\n    }\n  });\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n\n  if (addImage) {\n    const text = $(container).data(\"dragAndDropHelpText\");\n    $(container).after(`<p class=\"help-text\" style=\"margin-top:-1.5rem;\">${text}</p>`);\n  }\n\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n\n  return quill;\n}\n"]},"metadata":{},"sourceType":"module"}