{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/* eslint-disable no-div-regex, no-useless-escape, no-param-reassign, id-length */\n\n/* eslint max-lines: [\"error\", {\"max\": 350, \"skipBlankLines\": true}] */\n\n/**\n * A plain Javascript component that handles the form filter.\n * @class\n * @augments Component\n */\n\n\nimport delayed from \"src/decidim/delayed\";\nimport CheckBoxesTree from \"src/decidim/check_boxes_tree\";\nimport { registerCallback, unregisterCallback, pushState, replaceState, state } from \"src/decidim/history\";\nimport DataPicker from \"src/decidim/data_picker\";\n\nvar FormFilterComponent = /*#__PURE__*/function () {\n  function FormFilterComponent($form) {\n    _classCallCheck(this, FormFilterComponent);\n\n    this.$form = $form;\n    this.id = this.$form.attr(\"id\") || this._getUID();\n    this.mounted = false;\n    this.changeEvents = true;\n    this.theCheckBoxesTree = new CheckBoxesTree();\n    this.theDataPicker = window.theDataPicker || new DataPicker($(\".data-picker\"));\n\n    this._updateInitialState();\n\n    this._onFormChange = delayed(this, this._onFormChange.bind(this));\n    this._onPopState = this._onPopState.bind(this);\n\n    if (window.Decidim.PopStateHandler) {\n      this.popStateSubmiter = false;\n    } else {\n      this.popStateSubmiter = true;\n      window.Decidim.PopStateHandler = this.id;\n    }\n  }\n  /**\n   * Handles the logic for unmounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n\n\n  _createClass(FormFilterComponent, [{\n    key: \"unmountComponent\",\n    value: function unmountComponent() {\n      if (this.mounted) {\n        this.mounted = false;\n        this.$form.off(\"change\", \"input, select\", this._onFormChange);\n        unregisterCallback(\"filters-\".concat(this.id));\n      }\n    }\n    /**\n     * Handles the logic for mounting the component\n     * @public\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"mountComponent\",\n    value: function mountComponent() {\n      var _this = this;\n\n      if (this.$form.length > 0 && !this.mounted) {\n        this.mounted = true;\n        var queue = 0;\n        var contentContainer = $(this.$form.closest(\".filters\").parent().find(\".skip\").attr(\"href\"));\n\n        if (contentContainer.length === 0 && this.$form.data(\"remoteFill\")) {\n          contentContainer = this.$form.data(\"remoteFill\");\n        }\n\n        this.$form.on(\"change\", \"input:not([data-disable-dynamic-change]), select:not([data-disable-dynamic-change])\", this._onFormChange);\n        this.currentFormRequest = null;\n        this.$form.on(\"ajax:beforeSend\", function (e) {\n          if (_this.currentFormRequest) {\n            _this.currentFormRequest.abort();\n          }\n\n          _this.currentFormRequest = e.originalEvent.detail[0];\n          queue += 1;\n\n          if (queue > 0 && contentContainer.length > 0 && !contentContainer.hasClass(\"spinner-container\")) {\n            contentContainer.addClass(\"spinner-container\");\n          }\n        });\n        this.$form.on(\"ajax:success\", function () {\n          queue -= 1;\n\n          if (queue <= 0 && contentContainer.length > 0) {\n            contentContainer.removeClass(\"spinner-container\");\n          }\n        });\n        this.$form.on(\"ajax:error\", function () {\n          queue -= 1;\n\n          if (queue <= 0 && contentContainer.length > 0) {\n            contentContainer.removeClass(\"spinner-container\");\n          }\n\n          _this.$form.find(\".spinner-container\").addClass(\"hide\");\n        });\n        this.theCheckBoxesTree.setContainerForm(this.$form);\n        registerCallback(\"filters-\".concat(this.id), function (currentState) {\n          _this._onPopState(currentState);\n        });\n      }\n    }\n    /**\n     * Sets path in the browser history with the initial filters state, to allow to restoring it when using browser history.\n     * @private\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"_updateInitialState\",\n    value: function _updateInitialState() {\n      var _this$_currentStateAn = this._currentStateAndPath(),\n          _this$_currentStateAn2 = _slicedToArray(_this$_currentStateAn, 2),\n          initialPath = _this$_currentStateAn2[0],\n          initialState = _this$_currentStateAn2[1];\n\n      initialState._path = initialPath;\n      replaceState(null, initialState);\n    }\n    /**\n     * Finds the current location.\n     * @param {boolean} withHost - include the host part in the returned location\n     * @private\n     * @returns {String} - Returns the current location.\n     */\n\n  }, {\n    key: \"_getLocation\",\n    value: function _getLocation() {\n      var withHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var currentState = state();\n      var path = \"\";\n\n      if (currentState && currentState._path) {\n        path = currentState._path;\n      } else {\n        path = window.location.pathname + window.location.search + window.location.hash;\n      }\n\n      if (withHost) {\n        return window.location.origin + path;\n      }\n\n      return path;\n    }\n    /**\n     * Parse current location and get filter values.\n     * @private\n     * @returns {Object} - An object where a key correspond to a filter field\n     *                     and the value is the current value for the filter.\n     */\n\n  }, {\n    key: \"_parseLocationFilterValues\",\n    value: function _parseLocationFilterValues() {\n      // Every location param is constructed like this: filter[key]=value\n      var regexpResult = decodeURIComponent(this._getLocation()).match(/filter\\[([^\\]]*)\\](?:\\[\\])?=([^&]*)/g); // The RegExp g flag returns null or an array of coincidences. It doesn't return the match groups\n\n      if (regexpResult) {\n        var filterParams = regexpResult.reduce(function (acc, result) {\n          var _result$match = result.match(/filter\\[([^\\]]*)\\](\\[\\])?=([^&]*)/),\n              _result$match2 = _slicedToArray(_result$match, 4),\n              key = _result$match2[1],\n              array = _result$match2[2],\n              value = _result$match2[3];\n\n          if (array) {\n            if (!acc[key]) {\n              acc[key] = [];\n            }\n\n            acc[key].push(value);\n          } else {\n            acc[key] = value;\n          }\n\n          return acc;\n        }, {});\n        return filterParams;\n      }\n\n      return null;\n    }\n    /**\n     * Parse current location and get the current order.\n     * @private\n     * @returns {string} - The current order\n     */\n\n  }, {\n    key: \"_parseLocationOrderValue\",\n    value: function _parseLocationOrderValue() {\n      var url = this._getLocation();\n\n      var match = url.match(/order=([^&]*)/);\n      var $orderMenu = this.$form.find(\".order-by .menu\");\n      var order = $orderMenu.find(\".menu a:first\").data(\"order\");\n\n      if (match) {\n        order = match[1];\n      }\n\n      return order;\n    }\n    /**\n     * Clears the form to start with a clean state.\n     * @private\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"_clearForm\",\n    value: function _clearForm() {\n      var _this2 = this;\n\n      this.$form.find(\"input[type=checkbox]\").each(function (index, element) {\n        element.checked = element.indeterminate = false;\n      });\n      this.$form.find(\"input[type=radio]\").attr(\"checked\", false);\n      this.$form.find(\".data-picker\").each(function (_index, picker) {\n        _this2.theDataPicker.clear(picker);\n      }); // This ensure the form is reset in a valid state where a fieldset of\n      // radio buttons has the first selected.\n\n      this.$form.find(\"fieldset input[type=radio]:first\").each(function () {\n        // I need the this to iterate a jQuery collection\n        $(this)[0].checked = true; // eslint-disable-line no-invalid-this\n      });\n    }\n    /**\n     * Handles the logic when going back to a previous state in the filter form.\n     * @private\n     * @param {Object} currentState - state stored along with location URL\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"_onPopState\",\n    value: function _onPopState(currentState) {\n      var _this3 = this;\n\n      this.changeEvents = false;\n\n      this._clearForm();\n\n      var filterParams = this._parseLocationFilterValues();\n\n      var currentOrder = this._parseLocationOrderValue();\n\n      this.$form.find(\"input.order_filter\").val(currentOrder);\n\n      if (filterParams) {\n        var fieldIds = Object.keys(filterParams); // Iterate the filter params and set the correct form values\n\n        fieldIds.forEach(function (fieldName) {\n          var value = filterParams[fieldName];\n\n          if (Array.isArray(value)) {\n            var checkboxes = _this3.$form.find(\"input[type=checkbox][name=\\\"filter[\".concat(fieldName, \"][]\\\"]\"));\n\n            _this3.theCheckBoxesTree.updateChecked(checkboxes, value);\n          } else {\n            _this3.$form.find(\"*[name=\\\"filter[\".concat(fieldName, \"]\\\"]\")).each(function (index, element) {\n              switch (element.type) {\n                case \"hidden\":\n                  break;\n\n                case \"radio\":\n                case \"checkbox\":\n                  element.checked = value === element.value;\n                  break;\n\n                default:\n                  element.value = value;\n              }\n            });\n          }\n        });\n      } // Retrieves picker information for selected values (value, text and link) from the state object\n\n\n      $(\".data-picker\", this.$form).each(function (_index, picker) {\n        var pickerState = currentState[picker.id];\n\n        if (pickerState) {\n          _this3.theDataPicker.load(picker, pickerState);\n        }\n      }); // Only one instance should submit the form on browser history navigation\n\n      if (this.popStateSubmiter) {\n        Rails.fire(this.$form[0], \"submit\");\n      }\n\n      this.changeEvents = true;\n    }\n    /**\n     * Handles the logic to update the current location after a form change event.\n     * @private\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"_onFormChange\",\n    value: function _onFormChange() {\n      if (!this.changeEvents) {\n        return;\n      }\n\n      var _this$_currentStateAn3 = this._currentStateAndPath(),\n          _this$_currentStateAn4 = _slicedToArray(_this$_currentStateAn3, 2),\n          newPath = _this$_currentStateAn4[0],\n          newState = _this$_currentStateAn4[1];\n\n      var path = this._getLocation(false);\n\n      if (newPath === path) {\n        return;\n      }\n\n      Rails.fire(this.$form[0], \"submit\");\n      pushState(newPath, newState);\n    }\n    /**\n     * Calculates the path and the state associated to the filters inputs.\n     * @private\n     * @returns {Array} - Returns an array with the path and the state for the current filters state.\n     */\n\n  }, {\n    key: \"_currentStateAndPath\",\n    value: function _currentStateAndPath() {\n      var _this4 = this;\n\n      var formAction = this.$form.attr(\"action\");\n      var params = this.$form.find(\":not(.ignore-filters)\").find(\"select:not(.ignore-filter), input:not(.ignore-filter)\").serialize();\n      var path = \"\";\n      var currentState = {};\n\n      if (formAction.indexOf(\"?\") < 0) {\n        path = \"\".concat(formAction, \"?\").concat(params);\n      } else {\n        path = \"\".concat(formAction, \"&\").concat(params);\n      } // Stores picker information for selected values (value, text and link) in the currentState object\n\n\n      $(\".data-picker\", this.$form).each(function (_index, picker) {\n        currentState[picker.id] = _this4.theDataPicker.save(picker);\n      });\n      return [path, currentState];\n    }\n    /**\n     * Generates a unique identifier for the form.\n     * @private\n     * @returns {String} - Returns a unique identifier\n     */\n\n  }, {\n    key: \"_getUID\",\n    value: function _getUID() {\n      return \"filter-form-\".concat(new Date().setUTCMilliseconds(), \"-\").concat(Math.floor(Math.random() * 10000000));\n    }\n  }]);\n\n  return FormFilterComponent;\n}();\n\nexport { FormFilterComponent as default };","map":{"version":3,"mappings":"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","names":["delayed","CheckBoxesTree","registerCallback","unregisterCallback","pushState","replaceState","state","DataPicker","FormFilterComponent","$form","_classCallCheck","id","attr","_getUID","mounted","changeEvents","theCheckBoxesTree","theDataPicker","window","$","_updateInitialState","_onFormChange","bind","_onPopState","Decidim","PopStateHandler","popStateSubmiter","off","length","queue","contentContainer","closest","parent","find","data","on","currentFormRequest","e","_this","abort","originalEvent","detail","hasClass","addClass","removeClass","setContainerForm","currentState","_currentStateAndPath","initialPath","initialState","_path","withHost","path","location","pathname","search","hash","origin","regexpResult","decodeURIComponent","_getLocation","match","filterParams","reduce","acc","result","key","array","value","push","url","$orderMenu","order","each","index","element","checked","indeterminate","_index","picker","_this2","clear","_clearForm","_parseLocationFilterValues","currentOrder","_parseLocationOrderValue","val","fieldIds","Object","keys","forEach","fieldName","Array","isArray","checkboxes","_this3","updateChecked","type","pickerState","load","Rails","fire","newPath","newState","formAction","params","serialize","indexOf","_this4","save","Date","setUTCMilliseconds","Math","floor","random"],"sources":["/var/lib/gems/2.7.0/gems/decidim-core-0.26.0/app/packs/src/decidim/form_filter.js"],"sourcesContent":["/* eslint-disable no-div-regex, no-useless-escape, no-param-reassign, id-length */\n/* eslint max-lines: [\"error\", {\"max\": 350, \"skipBlankLines\": true}] */\n\n/**\n * A plain Javascript component that handles the form filter.\n * @class\n * @augments Component\n */\n\nimport delayed from \"src/decidim/delayed\"\nimport CheckBoxesTree from \"src/decidim/check_boxes_tree\"\nimport { registerCallback, unregisterCallback, pushState, replaceState, state } from \"src/decidim/history\"\nimport DataPicker from \"src/decidim/data_picker\"\n\nexport default class FormFilterComponent {\n  constructor($form) {\n    this.$form = $form;\n    this.id = this.$form.attr(\"id\") || this._getUID();\n    this.mounted = false;\n    this.changeEvents = true;\n    this.theCheckBoxesTree = new CheckBoxesTree();\n    this.theDataPicker = window.theDataPicker || new DataPicker($(\".data-picker\"));\n\n    this._updateInitialState();\n    this._onFormChange = delayed(this, this._onFormChange.bind(this));\n    this._onPopState = this._onPopState.bind(this);\n\n    if (window.Decidim.PopStateHandler) {\n      this.popStateSubmiter = false;\n    } else {\n      this.popStateSubmiter = true;\n      window.Decidim.PopStateHandler = this.id;\n    }\n  }\n\n  /**\n   * Handles the logic for unmounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  unmountComponent() {\n    if (this.mounted) {\n      this.mounted = false;\n      this.$form.off(\"change\", \"input, select\", this._onFormChange);\n\n      unregisterCallback(`filters-${this.id}`)\n    }\n  }\n\n  /**\n   * Handles the logic for mounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  mountComponent() {\n    if (this.$form.length > 0 && !this.mounted) {\n      this.mounted = true;\n      let queue = 0;\n\n      let contentContainer = $(this.$form.closest(\".filters\").parent().find(\".skip\").attr(\"href\"));\n      if (contentContainer.length === 0 && this.$form.data(\"remoteFill\")) {\n        contentContainer = this.$form.data(\"remoteFill\");\n      }\n      this.$form.on(\"change\", \"input:not([data-disable-dynamic-change]), select:not([data-disable-dynamic-change])\", this._onFormChange);\n\n      this.currentFormRequest = null;\n      this.$form.on(\"ajax:beforeSend\", (e) => {\n        if (this.currentFormRequest) {\n          this.currentFormRequest.abort();\n        }\n        this.currentFormRequest = e.originalEvent.detail[0];\n        queue += 1;\n        if (queue > 0 && contentContainer.length > 0 && !contentContainer.hasClass(\"spinner-container\")) {\n          contentContainer.addClass(\"spinner-container\");\n        }\n      });\n\n      this.$form.on(\"ajax:success\", () => {\n        queue -= 1;\n        if (queue <= 0 && contentContainer.length > 0) {\n          contentContainer.removeClass(\"spinner-container\");\n        }\n      });\n\n      this.$form.on(\"ajax:error\", () => {\n        queue -= 1;\n        if (queue <= 0 && contentContainer.length > 0) {\n          contentContainer.removeClass(\"spinner-container\");\n        }\n        this.$form.find(\".spinner-container\").addClass(\"hide\");\n      });\n\n      this.theCheckBoxesTree.setContainerForm(this.$form);\n\n      registerCallback(`filters-${this.id}`, (currentState) => {\n        this._onPopState(currentState);\n      });\n    }\n  }\n\n  /**\n   * Sets path in the browser history with the initial filters state, to allow to restoring it when using browser history.\n   * @private\n   * @returns {Void} - Returns nothing.\n   */\n  _updateInitialState() {\n    const [initialPath, initialState] = this._currentStateAndPath();\n    initialState._path = initialPath\n    replaceState(null, initialState);\n  }\n\n  /**\n   * Finds the current location.\n   * @param {boolean} withHost - include the host part in the returned location\n   * @private\n   * @returns {String} - Returns the current location.\n   */\n  _getLocation(withHost = true) {\n    const currentState = state();\n    let path = \"\";\n\n    if (currentState && currentState._path) {\n      path = currentState._path;\n    } else {\n      path = window.location.pathname + window.location.search + window.location.hash;\n    }\n\n    if (withHost) {\n      return window.location.origin + path;\n    }\n    return path;\n  }\n\n  /**\n   * Parse current location and get filter values.\n   * @private\n   * @returns {Object} - An object where a key correspond to a filter field\n   *                     and the value is the current value for the filter.\n   */\n  _parseLocationFilterValues() {\n    // Every location param is constructed like this: filter[key]=value\n    let regexpResult = decodeURIComponent(this._getLocation()).match(/filter\\[([^\\]]*)\\](?:\\[\\])?=([^&]*)/g);\n\n    // The RegExp g flag returns null or an array of coincidences. It doesn't return the match groups\n    if (regexpResult) {\n      const filterParams = regexpResult.reduce((acc, result) => {\n        const [, key, array, value] = result.match(/filter\\[([^\\]]*)\\](\\[\\])?=([^&]*)/);\n        if (array) {\n          if (!acc[key]) {\n            acc[key] = [];\n          }\n          acc[key].push(value);\n        } else {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n\n      return filterParams;\n    }\n\n    return null;\n  }\n\n  /**\n   * Parse current location and get the current order.\n   * @private\n   * @returns {string} - The current order\n   */\n  _parseLocationOrderValue() {\n    const url = this._getLocation();\n    const match = url.match(/order=([^&]*)/);\n    const $orderMenu = this.$form.find(\".order-by .menu\");\n    let order = $orderMenu.find(\".menu a:first\").data(\"order\");\n\n    if (match) {\n      order = match[1];\n    }\n\n    return order;\n  }\n\n  /**\n   * Clears the form to start with a clean state.\n   * @private\n   * @returns {Void} - Returns nothing.\n   */\n  _clearForm() {\n    this.$form.find(\"input[type=checkbox]\").each((index, element) => {\n      element.checked = element.indeterminate = false;\n    });\n    this.$form.find(\"input[type=radio]\").attr(\"checked\", false);\n    this.$form.find(\".data-picker\").each((_index, picker) => {\n      this.theDataPicker.clear(picker);\n    });\n\n    // This ensure the form is reset in a valid state where a fieldset of\n    // radio buttons has the first selected.\n    this.$form.find(\"fieldset input[type=radio]:first\").each(function () {\n      // I need the this to iterate a jQuery collection\n      $(this)[0].checked = true; // eslint-disable-line no-invalid-this\n    });\n  }\n\n  /**\n   * Handles the logic when going back to a previous state in the filter form.\n   * @private\n   * @param {Object} currentState - state stored along with location URL\n   * @returns {Void} - Returns nothing.\n   */\n  _onPopState(currentState) {\n    this.changeEvents = false;\n    this._clearForm();\n\n    const filterParams = this._parseLocationFilterValues();\n    const currentOrder = this._parseLocationOrderValue();\n\n    this.$form.find(\"input.order_filter\").val(currentOrder);\n\n    if (filterParams) {\n      const fieldIds = Object.keys(filterParams);\n\n      // Iterate the filter params and set the correct form values\n      fieldIds.forEach((fieldName) => {\n        let value = filterParams[fieldName];\n\n        if (Array.isArray(value)) {\n          let checkboxes = this.$form.find(`input[type=checkbox][name=\"filter[${fieldName}][]\"]`);\n          this.theCheckBoxesTree.updateChecked(checkboxes, value);\n        } else {\n          this.$form.find(`*[name=\"filter[${fieldName}]\"]`).each((index, element) => {\n            switch (element.type) {\n            case \"hidden\":\n              break;\n            case \"radio\":\n            case \"checkbox\":\n              element.checked = value === element.value;\n              break;\n            default:\n              element.value = value;\n            }\n          });\n        }\n      });\n    }\n\n    // Retrieves picker information for selected values (value, text and link) from the state object\n    $(\".data-picker\", this.$form).each((_index, picker) => {\n      let pickerState = currentState[picker.id];\n      if (pickerState) {\n        this.theDataPicker.load(picker, pickerState);\n      }\n    })\n\n    // Only one instance should submit the form on browser history navigation\n    if (this.popStateSubmiter) {\n      Rails.fire(this.$form[0], \"submit\");\n    }\n\n    this.changeEvents = true;\n  }\n\n  /**\n   * Handles the logic to update the current location after a form change event.\n   * @private\n   * @returns {Void} - Returns nothing.\n   */\n  _onFormChange() {\n    if (!this.changeEvents) {\n      return;\n    }\n\n    const [newPath, newState] = this._currentStateAndPath();\n    const path = this._getLocation(false);\n\n    if (newPath === path) {\n      return;\n    }\n\n    Rails.fire(this.$form[0], \"submit\");\n    pushState(newPath, newState);\n  }\n\n  /**\n   * Calculates the path and the state associated to the filters inputs.\n   * @private\n   * @returns {Array} - Returns an array with the path and the state for the current filters state.\n   */\n  _currentStateAndPath() {\n    const formAction = this.$form.attr(\"action\");\n    const params = this.$form.find(\":not(.ignore-filters)\").find(\"select:not(.ignore-filter), input:not(.ignore-filter)\").serialize();\n\n    let path = \"\";\n    let currentState = {};\n\n    if (formAction.indexOf(\"?\") < 0) {\n      path = `${formAction}?${params}`;\n    } else {\n      path = `${formAction}&${params}`;\n    }\n\n    // Stores picker information for selected values (value, text and link) in the currentState object\n    $(\".data-picker\", this.$form).each((_index, picker) => {\n      currentState[picker.id] = this.theDataPicker.save(picker);\n    })\n\n    return [path, currentState];\n  }\n\n  /**\n   * Generates a unique identifier for the form.\n   * @private\n   * @returns {String} - Returns a unique identifier\n   */\n  _getUID() {\n    return `filter-form-${new Date().setUTCMilliseconds()}-${Math.floor(Math.random() * 10000000)}`;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}