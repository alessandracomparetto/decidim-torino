{"ast":null,"code":"/* eslint-disable require-jsdoc */\nimport \"entrypoints/decidim_api_graphiql.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GraphiQL from \"graphiql\";\nimport Configuration from \"src/decidim/configuration\";\nwindow.Decidim = window.Decidim || {};\nwindow.Decidim.config = new Configuration();\nvar parameters = {}; // Parse the search string to get url parameters.\n\nvar search = window.location.search;\nsearch.substr(1).split(\"&\").forEach(function (entry) {\n  var eq = entry.indexOf(\"=\");\n\n  if (eq >= 0) {\n    parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1));\n  }\n}); // if variables was provided, try to format it.\n\nif (parameters.variables) {\n  try {\n    parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2);\n  } catch (error) {// Do nothing, we want to display the invalid JSON as a string, rather\n    // than present an error.\n  }\n}\n\nvar updateURL = function updateURL() {\n  var newSearch = Object.keys(parameters).map(function (key) {\n    return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(parameters[key]));\n  }).join(\"&\");\n  history.replaceState(null, null, \"?\".concat(newSearch));\n}; // When the query and variables string is edited, update the URL bar so\n// that it can be easily shared\n\n\nvar onEditQuery = function onEditQuery(newQuery) {\n  parameters.query = newQuery;\n  updateURL();\n};\n\nvar onEditVariables = function onEditVariables(newVariables) {\n  parameters.variables = newVariables;\n  updateURL();\n}; // Defines a GraphQL fetcher using the fetch API.\n\n\nvar graphQLFetcher = function graphQLFetcher(graphQLParams) {\n  var graphQLEndpoint = window.Decidim.config.get(\"graphql_endpoint\");\n  return fetch(graphQLEndpoint, {\n    method: \"post\",\n    headers: JSON.parse(window.Decidim.config.get(\"request_headers\")),\n    body: JSON.stringify(graphQLParams),\n    credentials: \"include\"\n  }).then(function (response) {\n    try {\n      return response.json();\n    } catch (error) {\n      return {\n        \"status\": response.status,\n        \"message\": \"The server responded with invalid JSON, this is probably a server-side error\",\n        \"response\": response.text()\n      };\n    }\n  });\n};\n\nwindow.addEventListener(\"DOMContentLoaded\", function () {\n  // Render <GraphiQL /> into the body.\n  ReactDOM.render( /*#__PURE__*/React.createElement(GraphiQL, {\n    fetcher: graphQLFetcher,\n    defaultQuery: window.Decidim.config.get(\"default_query\"),\n    query: parameters.query,\n    variables: parameters.variables,\n    onEditQuery: onEditQuery,\n    onEditVariables: onEditVariables\n  }), document.getElementById(\"graphiql-container\"));\n});","map":{"version":3,"mappings":"AAAA;AAEA,OAAO,uCAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AAEAC,MAAM,CAACC,OAAPD,GAAiBA,MAAM,CAACC,OAAPD,IAAkB,EAAnCA;AACAA,MAAM,CAACC,OAAPD,CAAeE,MAAfF,GAAwB,IAAID,aAAJ,EAAxBC;AAEA,IAAIG,UAAU,GAAG,EAAjB,C,CAEA;;AACA,IAAMC,MAAM,GAAGJ,MAAM,CAACK,QAAPL,CAAgBI,MAA/B;AACAA,MAAM,CAACE,MAAPF,CAAc,CAAdA,EAAiBG,KAAjBH,CAAuB,GAAvBA,EAA4BI,OAA5BJ,CAAoC,UAAUK,KAAV,EAAiB;AACnD,MAAIC,EAAE,GAAGD,KAAK,CAACE,OAANF,CAAc,GAAdA,CAAT;;AACA,MAAIC,EAAE,IAAI,CAAV,EAAa;AACXP,cAAU,CAACS,kBAAkB,CAACH,KAAK,CAACI,KAANJ,CAAY,CAAZA,EAAeC,EAAfD,CAAD,CAAnB,CAAVN,GACES,kBAAkB,CAACH,KAAK,CAACI,KAANJ,CAAYC,EAAE,GAAG,CAAjBD,CAAD,CADpBN;AAED;AALH,G,CAOA;;AACA,IAAIA,UAAU,CAACW,SAAf,EAA0B;AACxB,MAAI;AACFX,cAAU,CAACW,SAAXX,GACEY,IAAI,CAACC,SAALD,CAAeA,IAAI,CAACE,KAALF,CAAWZ,UAAU,CAACW,SAAtBC,CAAfA,EAAiD,IAAjDA,EAAuD,CAAvDA,CADFZ;AADF,IAGE,OAAOe,KAAP,EAAc,CACd;AACA;AACD;AACF;;AAED,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAW;AAC3B,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAPD,CAAYlB,UAAZkB,EAAwBE,GAAxBF,CAA4B,UAAUG,GAAV,EAAe;AAC3D,qBAAUC,kBAAkB,CAACD,GAAD,CAA5B,cAAqCC,kBAAkB,CAACtB,UAAU,CAACqB,GAAD,CAAX,CAAvD;AADgB,KAEfE,IAFeL,CAEV,GAFUA,CAAlB;AAIAM,SAAO,CAACC,YAARD,CAAqB,IAArBA,EAA2B,IAA3BA,aAAqCP,SAArC;AALF,E,CAQA;AACA;;;AACA,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAASC,QAAT,EAAmB;AACrC3B,YAAU,CAAC4B,KAAX5B,GAAmB2B,QAAnB3B;AACAgB,WAAS;AAFX;;AAKA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAASC,YAAT,EAAuB;AAC7C9B,YAAU,CAACW,SAAXX,GAAuB8B,YAAvB9B;AACAgB,WAAS;AAFX,E,CAKA;;;AACA,IAAMe,cAAc,GAAG,SAAjBA,cAAiB,CAASC,aAAT,EAAwB;AAC7C,MAAMC,eAAe,GAAGpC,MAAM,CAACC,OAAPD,CAAeE,MAAfF,CAAsBqC,GAAtBrC,CAA0B,kBAA1BA,CAAxB;AACA,SAAOsC,KAAK,CAACF,eAAD,EAAkB;AAC5BG,UAAM,EAAE,MADoB;AAE5BC,WAAO,EAAEzB,IAAI,CAACE,KAALF,CAAWf,MAAM,CAACC,OAAPD,CAAeE,MAAfF,CAAsBqC,GAAtBrC,CAA0B,iBAA1BA,CAAXe,CAFmB;AAG5B0B,QAAI,EAAE1B,IAAI,CAACC,SAALD,CAAeoB,aAAfpB,CAHsB;AAI5B2B,eAAW,EAAE;AAJe,GAAlB,CAALJ,CAKJK,IALIL,CAKC,UAASM,QAAT,EAAmB;AACzB,QAAI;AACF,aAAOA,QAAQ,CAACC,IAATD,EAAP;AADF,MAEE,OAAO1B,KAAP,EAAc;AACd,aAAO;AACL,kBAAU0B,QAAQ,CAACE,MADd;AAEL,mBAAW,8EAFN;AAGL,oBAAYF,QAAQ,CAACG,IAATH;AAHP,OAAP;AAKD;AAdI,IAAP;AAFF;;AAoBA5C,MAAM,CAACgD,gBAAPhD,CAAwB,kBAAxBA,EAA4C,YAAM;AAChD;AACAH,UAAQ,CAACoD,MAATpD,eACED,KAAK,CAACsD,aAANtD,CAAoBE,QAApBF,EAA8B;AAC5BuD,WAAO,EAAEjB,cADmB;AAE5BkB,gBAAY,EAAEpD,MAAM,CAACC,OAAPD,CAAeE,MAAfF,CAAsBqC,GAAtBrC,CAA0B,eAA1BA,CAFc;AAG5B+B,SAAK,EAAE5B,UAAU,CAAC4B,KAHU;AAI5BjB,aAAS,EAAEX,UAAU,CAACW,SAJM;AAK5Be,eAAW,EAAEA,WALe;AAM5BG,mBAAe,EAAEA;AANW,GAA9BpC,CADFC,EASEwD,QAAQ,CAACC,cAATD,CAAwB,oBAAxBA,CATFxD;AAFF","names":["React","ReactDOM","GraphiQL","Configuration","window","Decidim","config","parameters","search","location","substr","split","forEach","entry","eq","indexOf","decodeURIComponent","slice","variables","JSON","stringify","parse","error","updateURL","newSearch","Object","keys","map","key","encodeURIComponent","join","history","replaceState","onEditQuery","newQuery","query","onEditVariables","newVariables","graphQLFetcher","graphQLParams","graphQLEndpoint","get","fetch","method","headers","body","credentials","then","response","json","status","text","addEventListener","render","createElement","fetcher","defaultQuery","document","getElementById"],"sources":["/var/lib/gems/2.7.0/gems/decidim-api-0.26.0/app/packs/entrypoints/decidim_api_graphiql.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nimport \"entrypoints/decidim_api_graphiql.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport GraphiQL from \"graphiql\";\nimport Configuration from \"src/decidim/configuration\"\n\nwindow.Decidim = window.Decidim || {};\nwindow.Decidim.config = new Configuration()\n\nlet parameters = {};\n\n// Parse the search string to get url parameters.\nconst search = window.location.search;\nsearch.substr(1).split(\"&\").forEach(function (entry) {\n  let eq = entry.indexOf(\"=\");\n  if (eq >= 0) {\n    parameters[decodeURIComponent(entry.slice(0, eq))] =\n      decodeURIComponent(entry.slice(eq + 1));\n  }\n});\n// if variables was provided, try to format it.\nif (parameters.variables) {\n  try {\n    parameters.variables =\n      JSON.stringify(JSON.parse(parameters.variables), null, 2);\n  } catch (error) {\n    // Do nothing, we want to display the invalid JSON as a string, rather\n    // than present an error.\n  }\n}\n\nconst updateURL = function() {\n  const newSearch = Object.keys(parameters).map(function (key) {\n    return `${encodeURIComponent(key)}=${encodeURIComponent(parameters[key])}`;\n  }).join(\"&\");\n\n  history.replaceState(null, null, `?${newSearch}`);\n}\n\n// When the query and variables string is edited, update the URL bar so\n// that it can be easily shared\nconst onEditQuery = function(newQuery) {\n  parameters.query = newQuery;\n  updateURL();\n}\n\nconst onEditVariables = function(newVariables) {\n  parameters.variables = newVariables;\n  updateURL();\n}\n\n// Defines a GraphQL fetcher using the fetch API.\nconst graphQLFetcher = function(graphQLParams) {\n  const graphQLEndpoint = window.Decidim.config.get(\"graphql_endpoint\");\n  return fetch(graphQLEndpoint, {\n    method: \"post\",\n    headers: JSON.parse(window.Decidim.config.get(\"request_headers\")),\n    body: JSON.stringify(graphQLParams),\n    credentials: \"include\"\n  }).then(function(response) {\n    try {\n      return response.json();\n    } catch (error) {\n      return {\n        \"status\": response.status,\n        \"message\": \"The server responded with invalid JSON, this is probably a server-side error\",\n        \"response\": response.text()\n      };\n    }\n  })\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  // Render <GraphiQL /> into the body.\n  ReactDOM.render(\n    React.createElement(GraphiQL, {\n      fetcher: graphQLFetcher,\n      defaultQuery: window.Decidim.config.get(\"default_query\"),\n      query: parameters.query,\n      variables: parameters.variables,\n      onEditQuery: onEditQuery,\n      onEditVariables: onEditVariables\n    }),\n    document.getElementById(\"graphiql-container\")\n  )\n});\n"]},"metadata":{},"sourceType":"module"}