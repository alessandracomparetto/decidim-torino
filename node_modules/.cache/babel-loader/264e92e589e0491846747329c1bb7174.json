{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar AutoSelectOptionsFromUrl = /*#__PURE__*/function () {\n  function AutoSelectOptionsFromUrl() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AutoSelectOptionsFromUrl);\n\n    this.$source = options.source;\n    this.$select = options.select;\n    this.sourceToParams = options.sourceToParams;\n    this.run();\n  }\n\n  _createClass(AutoSelectOptionsFromUrl, [{\n    key: \"run\",\n    value: function run() {\n      this.$source.on(\"change\", this._onSourceChange.bind(this));\n\n      this._onSourceChange();\n    }\n  }, {\n    key: \"_onSourceChange\",\n    value: function _onSourceChange() {\n      var select = this.$select;\n      var params = this.sourceToParams(this.$source);\n      var url = this.$source.data(\"url\");\n      $.getJSON(url, params, function (data) {\n        select.find(\"option:not([value=''])\").remove();\n        var selectedValue = select.data(\"selected\");\n        data.forEach(function (option) {\n          var optionElement = $(\"<option value=\\\"\".concat(option.id, \"\\\">\").concat(option.body, \"</option>\")).appendTo(select);\n\n          if (option.id === selectedValue) {\n            optionElement.attr(\"selected\", true);\n          }\n        });\n\n        if (selectedValue) {\n          select.val(selectedValue);\n        }\n      });\n    }\n  }]);\n\n  return AutoSelectOptionsFromUrl;\n}();\n\nexport { AutoSelectOptionsFromUrl as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAAqBA,wB;AACnB,sCAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAAC;;AACxB,SAAKC,OAAL,GAAeF,OAAO,CAACG,MAAvB;AACA,SAAKC,OAAL,GAAeJ,OAAO,CAACK,MAAvB;AACA,SAAKC,cAAL,GAAsBN,OAAO,CAACM,cAA9B;AACA,SAAKC,GAAL;AACD;;;;WAED,eAAM;AACJ,WAAKL,OAAL,CAAaM,EAAb,CAAgB,QAAhB,EAA0B,KAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA1B;;AACA,WAAKD,eAAL;AACD;;;WAED,2BAAkB;AAChB,UAAMJ,MAAM,GAAG,KAAKD,OAApB;AACA,UAAMO,MAAM,GAAG,KAAKL,cAAL,CAAoB,KAAKJ,OAAzB,CAAf;AACA,UAAMU,GAAG,GAAG,KAAKV,OAAL,CAAaW,IAAb,CAAkB,KAAlB,CAAZ;AAEAC,OAAC,CAACC,OAAFD,CAAUF,GAAVE,EAAeH,MAAfG,EAAuB,UAAUD,IAAV,EAAgB;AACrCR,cAAM,CAACW,IAAPX,CAAY,wBAAZA,EAAsCY,MAAtCZ;AACA,YAAMa,aAAa,GAAGb,MAAM,CAACQ,IAAPR,CAAY,UAAZA,CAAtB;AAEAQ,YAAI,CAACM,OAALN,CAAa,UAACO,MAAD,EAAY;AACvB,cAAIC,aAAa,GAAGP,CAAC,2BAAmBM,MAAM,CAACE,EAA1B,gBAAiCF,MAAM,CAACG,IAAxC,eAADT,CAA0DU,QAA1DV,CAAmET,MAAnES,CAApB;;AACA,cAAIM,MAAM,CAACE,EAAPF,KAAcF,aAAlB,EAAiC;AAC/BG,yBAAa,CAACI,IAAdJ,CAAmB,UAAnBA,EAA+B,IAA/BA;AACD;AAJH;;AAOA,YAAIH,aAAJ,EAAmB;AACjBb,gBAAM,CAACqB,GAAPrB,CAAWa,aAAXb;AACD;AAbH;AAeD;;;;;;SAjCkBN,wB","names":["AutoSelectOptionsFromUrl","options","_classCallCheck","$source","source","$select","select","sourceToParams","run","on","_onSourceChange","bind","params","url","data","$","getJSON","find","remove","selectedValue","forEach","option","optionElement","id","body","appendTo","attr","val"],"sources":["/var/lib/gems/2.7.0/gems/decidim-forms-0.26.0/app/packs/src/decidim/forms/admin/auto_select_options_from_url.component.js"],"sourcesContent":["export default class AutoSelectOptionsFromUrl {\n  constructor(options = {}) {\n    this.$source = options.source;\n    this.$select = options.select;\n    this.sourceToParams = options.sourceToParams;\n    this.run();\n  }\n\n  run() {\n    this.$source.on(\"change\", this._onSourceChange.bind(this));\n    this._onSourceChange();\n  }\n\n  _onSourceChange() {\n    const select = this.$select;\n    const params = this.sourceToParams(this.$source);\n    const url = this.$source.data(\"url\");\n\n    $.getJSON(url, params, function (data) {\n      select.find(\"option:not([value=''])\").remove();\n      const selectedValue = select.data(\"selected\");\n\n      data.forEach((option) => {\n        let optionElement = $(`<option value=\"${option.id}\">${option.body}</option>`).appendTo(select);\n        if (option.id === selectedValue) {\n          optionElement.attr(\"selected\", true);\n        }\n      });\n\n      if (selectedValue) {\n        select.val(selectedValue);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}