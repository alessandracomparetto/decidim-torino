{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport * as L from \"leaflet\";\nimport \"src/decidim/map/icon\";\nimport MapControllerRegistry from \"src/decidim/map/controller_registry\";\n\nvar MapController = /*#__PURE__*/function () {\n  function MapController(mapId, config) {\n    _classCallCheck(this, MapController); // Remove the old map if there is already one with the same ID.\n\n\n    var old = MapControllerRegistry.getController(mapId);\n\n    if (old) {\n      old.remove();\n    }\n\n    this.mapId = mapId;\n    this.config = $.extend({\n      popupTemplateId: \"marker-popup\",\n      markerColor: \"#ef604d\"\n    }, config);\n    this.map = null;\n    this.eventHandlers = {};\n    MapControllerRegistry.setController(mapId, this);\n  }\n\n  _createClass(MapController, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"getMap\",\n    value: function getMap() {\n      return this.map;\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      this.map = L.map(this.mapId);\n      this.map.scrollWheelZoom.disable(); // Fix the keyboard navigation on the map\n\n      this.map.on(\"popupopen\", function (ev) {\n        var $popup = $(ev.popup.getElement());\n        $popup.attr(\"tabindex\", 0).focus();\n      });\n      this.map.on(\"popupclose\", function (ev) {\n        $(ev.popup._source._icon).focus();\n      });\n      return this.map;\n    } // Override this in the specific map controllers.\n\n  }, {\n    key: \"start\",\n    value: function start() {}\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.map) {\n        this.map.remove();\n        this.map = null;\n      }\n    }\n  }, {\n    key: \"createIcon\",\n    value: function createIcon() {\n      return new L.DivIcon.SVGIcon.DecidimIcon({\n        fillColor: this.config.markerColor,\n        iconSize: L.point(28, 36)\n      });\n    }\n  }, {\n    key: \"setEventHandler\",\n    value: function setEventHandler(name, callback) {\n      this.eventHandlers[name] = callback;\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(eventName, payload) {\n      var handler = this.eventHandlers[eventName];\n\n      if (typeof handler === \"function\") {\n        return Reflect.apply(handler, this, payload);\n      }\n\n      return null;\n    }\n  }]);\n\n  return MapController;\n}();\n\nexport { MapController as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,CAAZ,MAAmB,SAAnB;AACA,OAAO,sBAAP;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;;IAEqBC,a;AACnB,yBAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAAAC,0CACzB;;;AACA,QAAMC,GAAG,GAAGL,qBAAqB,CAACM,aAAtBN,CAAoCE,KAApCF,CAAZ;;AACA,QAAIK,GAAJ,EAAS;AACPA,SAAG,CAACE,MAAJF;AACD;;AAED,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcK,CAAC,CAACC,MAAFD,CAAS;AACrBE,qBAAe,EAAE,cADI;AAErBC,iBAAW,EAAE;AAFQ,KAATH,EAGXL,MAHWK,CAAd;AAKA,SAAKI,GAAL,GAAW,IAAX;AACA,SAAKC,aAAL,GAAqB,EAArB;AAEAb,yBAAqB,CAACc,aAAtBd,CAAoCE,KAApCF,EAA2C,IAA3CA;AACD;;;;WAED,qBAAY;AACV,aAAO,KAAKG,MAAZ;AACD;;;WAED,kBAAS;AACP,aAAO,KAAKS,GAAZ;AACD;;;WAED,gBAAO;AACL,WAAKA,GAAL,GAAWb,CAAC,CAACa,GAAFb,CAAM,KAAKG,KAAXH,CAAX;AAEA,WAAKa,GAAL,CAASG,eAAT,CAAyBC,OAAzB,GAHK,CAKL;;AACA,WAAKJ,GAAL,CAASK,EAAT,CAAY,WAAZ,EAAyB,UAACC,EAAD,EAAQ;AAC/B,YAAMC,MAAM,GAAGX,CAAC,CAACU,EAAE,CAACE,KAAHF,CAASG,UAATH,EAAD,CAAhB;AACAC,cAAM,CAACG,IAAPH,CAAY,UAAZA,EAAwB,CAAxBA,EAA2BI,KAA3BJ;AAFF;AAIA,WAAKP,GAAL,CAASK,EAAT,CAAY,YAAZ,EAA0B,UAACC,EAAD,EAAQ;AAChCV,SAAC,CAACU,EAAE,CAACE,KAAHF,CAASM,OAATN,CAAiBO,KAAlB,CAADjB,CAA0Be,KAA1Bf;AADF;AAIA,aAAO,KAAKI,GAAZ;MAGF;;;;WACA,iBAAQ,CAAE;;;WAEV,kBAAS;AACP,UAAI,KAAKA,GAAT,EAAc;AACZ,aAAKA,GAAL,CAASL,MAAT;AACA,aAAKK,GAAL,GAAW,IAAX;AACD;AACF;;;WAED,sBAAa;AACX,aAAO,IAAIb,CAAC,CAAC2B,OAAF3B,CAAU4B,OAAV5B,CAAkB6B,WAAtB,CAAkC;AACvCC,iBAAS,EAAE,KAAK1B,MAAL,CAAYQ,WADgB;AAEvCmB,gBAAQ,EAAE/B,CAAC,CAACgC,KAAFhC,CAAQ,EAARA,EAAY,EAAZA;AAF6B,OAAlC,CAAP;AAID;;;WAED,yBAAgBiC,IAAhB,EAAsBC,QAAtB,EAAgC;AAC9B,WAAKpB,aAAL,CAAmBmB,IAAnB,IAA2BC,QAA3B;AACD;;;WAED,sBAAaC,SAAb,EAAwBC,OAAxB,EAAiC;AAC/B,UAAMC,OAAO,GAAG,KAAKvB,aAAL,CAAmBqB,SAAnB,CAAhB;;AACA,UAAI,OAAOE,OAAP,KAAmB,UAAvB,EAAmC;AACjC,eAAOC,OAAO,CAACC,KAARD,CAAcD,OAAdC,EAAuB,IAAvBA,EAA6BF,OAA7BE,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;;SAxEkBpC,a","names":["L","MapControllerRegistry","MapController","mapId","config","_classCallCheck","old","getController","remove","$","extend","popupTemplateId","markerColor","map","eventHandlers","setController","scrollWheelZoom","disable","on","ev","$popup","popup","getElement","attr","focus","_source","_icon","DivIcon","SVGIcon","DecidimIcon","fillColor","iconSize","point","name","callback","eventName","payload","handler","Reflect","apply"],"sources":["/var/lib/gems/2.7.0/gems/decidim-core-0.26.0/app/packs/src/decidim/map/controller.js"],"sourcesContent":["import * as L from \"leaflet\";\nimport \"src/decidim/map/icon\"\nimport MapControllerRegistry from \"src/decidim/map/controller_registry\"\n\nexport default class MapController {\n  constructor(mapId, config) {\n    // Remove the old map if there is already one with the same ID.\n    const old = MapControllerRegistry.getController(mapId);\n    if (old) {\n      old.remove();\n    }\n\n    this.mapId = mapId;\n    this.config = $.extend({\n      popupTemplateId: \"marker-popup\",\n      markerColor: \"#ef604d\"\n    }, config);\n\n    this.map = null;\n    this.eventHandlers = {};\n\n    MapControllerRegistry.setController(mapId, this);\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  getMap() {\n    return this.map;\n  }\n\n  load() {\n    this.map = L.map(this.mapId);\n\n    this.map.scrollWheelZoom.disable();\n\n    // Fix the keyboard navigation on the map\n    this.map.on(\"popupopen\", (ev) => {\n      const $popup = $(ev.popup.getElement());\n      $popup.attr(\"tabindex\", 0).focus();\n    });\n    this.map.on(\"popupclose\", (ev) => {\n      $(ev.popup._source._icon).focus();\n    });\n\n    return this.map;\n  }\n\n  // Override this in the specific map controllers.\n  start() {}\n\n  remove() {\n    if (this.map) {\n      this.map.remove();\n      this.map = null;\n    }\n  }\n\n  createIcon() {\n    return new L.DivIcon.SVGIcon.DecidimIcon({\n      fillColor: this.config.markerColor,\n      iconSize: L.point(28, 36)\n    });\n  }\n\n  setEventHandler(name, callback) {\n    this.eventHandlers[name] = callback;\n  }\n\n  triggerEvent(eventName, payload) {\n    const handler = this.eventHandlers[eventName];\n    if (typeof handler === \"function\") {\n      return Reflect.apply(handler, this, payload);\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}